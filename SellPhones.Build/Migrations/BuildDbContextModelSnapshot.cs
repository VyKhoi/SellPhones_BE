// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SellPhones.Build;

#nullable disable

namespace SellPhones.Build.Migrations
{
    [DbContext(typeof(BuildDbContext))]
    partial class BuildDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SellPhones.Domain.Entity.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("PK_branch_Id");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.BranchProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductColorId");

                    b.HasKey("Id")
                        .HasName("PK_branch_product_color_Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductColorId");

                    b.ToTable("BranchProductColor", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.BranchPromotionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BrandProductColorId")
                        .HasColumnType("integer")
                        .HasColumnName("BrandProductColorId");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("double precision")
                        .HasColumnName("DiscountRate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("PromotionId");

                    b.HasKey("Id")
                        .HasName("PK_branch_promotion_product_Id");

                    b.HasIndex("BrandProductColorId");

                    b.HasIndex("PromotionId");

                    b.ToTable("BranchPromotionProduct", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Color", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("Name")
                        .HasName("PK_color_names");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContentComment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ContentComment");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("integer")
                        .HasColumnName("ReplyId");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_comment_Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReplyId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Earphone", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ConnectionType");

                    b.Property<string>("Design")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FrequencyResponse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("FrequencyResponse");

                    b.HasKey("Id")
                        .HasName("PK_earphone_product_ptr_id");

                    b.ToTable("Earphone", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWeb")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.GroupRole", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRoles", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleBlock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirebaseTokenWeb")
                        .HasColumnType("text");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Hometown")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PassWord")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SocialId")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AccessTokenExpiresDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccessTokenHash")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshTokenIdHash")
                        .HasColumnType("text");

                    b.Property<string>("RefreshTokenIdHashSource")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedTimesTamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerifications");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.ImageProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("LinkImg");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.HasKey("Id")
                        .HasName("PK_imageproduct_Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageProduct", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Laptop", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Battery")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cpu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CPU");

                    b.Property<string>("GraphicCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Graphic_Card");

                    b.Property<string>("OperatorSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("OperatorSystem");

                    b.Property<string>("Others")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RAM");

                    b.Property<string>("Rom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ROM");

                    b.HasKey("Id")
                        .HasName("PK_laptop_product_ptr_id");

                    b.ToTable("Laptop", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Manufacture", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Name")
                        .HasName("PK_manufacture_names");

                    b.ToTable("Manufacture", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DeliveryAddress");

                    b.Property<string>("DeliveryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DeliveryPhone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("OrderDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_order_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BrandProductColorId")
                        .HasColumnType("integer")
                        .HasColumnName("BrandProductColorId");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OderId")
                        .HasColumnType("integer")
                        .HasColumnName("OderId");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("Id")
                        .HasName("PK_orderdetail_Id");

                    b.HasIndex("BrandProductColorId");

                    b.HasIndex("OderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameManufactureId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NameManufactureId");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_product_Id");

                    b.HasIndex("NameManufactureId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NameColorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NameColorId");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.HasKey("Id")
                        .HasName("PK_product_color_Id");

                    b.HasIndex("NameColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColor", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Active")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeEnd")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("TimeEnd");

                    b.Property<DateTime>("TimeStart")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("TimeStart");

                    b.HasKey("Id")
                        .HasName("PK_promotion_Id");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK_review_Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Smartphone", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Battery")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cpu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CPU");

                    b.Property<string>("OperatorSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("OperatorSystem");

                    b.Property<string>("Others")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RAM");

                    b.Property<string>("Rom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ROM");

                    b.HasKey("Id")
                        .HasName("PK_smartphone_product_ptr_id");

                    b.ToTable("Smartphone", (string)null);
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.BranchProductColor", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Branch", "Branch")
                        .WithMany("BranchProductColors")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("branch_product_color$branch__idBranch_id_edb533ab_fk_cellphone");

                    b.HasOne("SellPhones.Domain.Entity.ProductColor", "ProductColor")
                        .WithMany("BranchProductColors")
                        .HasForeignKey("ProductColorId")
                        .IsRequired()
                        .HasConstraintName("branch_product_color$branch__idProductColor_id_fbdccc0b_fk_cellphone");

                    b.Navigation("Branch");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.BranchPromotionProduct", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.BranchProductColor", "BrandProductColor")
                        .WithMany("BranchPromotionProducts")
                        .HasForeignKey("BrandProductColorId")
                        .IsRequired()
                        .HasConstraintName("branch_promotion_product$branch__idBrandProductColor__95f82815_fk_cellphone");

                    b.HasOne("SellPhones.Domain.Entity.Promotion", "Promotion")
                        .WithMany("BranchPromotionProducts")
                        .HasForeignKey("PromotionId")
                        .IsRequired()
                        .HasConstraintName("branch_promotion_product$branch__idPromotion_id_3456dae1_fk_cellphone");

                    b.Navigation("BrandProductColor");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Comment", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("comment$comment_idProduct_id_886d85ab_fk_cellphone");

                    b.HasOne("SellPhones.Domain.Entity.Comment", "ReplyNavigation")
                        .WithMany("InverseIdReplyNavigations")
                        .HasForeignKey("ReplyId")
                        .HasConstraintName("FK_comment_comment");

                    b.HasOne("SellPhones.Domain.Entity.Identity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("comment$comment_idUser_id_d2fff2a5_fk_user_Id");

                    b.Navigation("Product");

                    b.Navigation("ReplyNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Earphone", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithOne("Earphone")
                        .HasForeignKey("SellPhones.Domain.Entity.Earphone", "Id")
                        .IsRequired()
                        .HasConstraintName("earphone$earphon_product_ptr_id_af17d76e_fk_cellphone");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.GroupRole", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellPhones.Domain.Entity.Identity.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.RoleClaim", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserClaim", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserGroup", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellPhones.Domain.Entity.Identity.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserLogin", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserRole", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellPhones.Domain.Entity.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellPhones.Domain.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellPhones.Domain.Entity.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserToken", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellPhones.Domain.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.UserVerification", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.ImageProduct", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithMany("ImageProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("imageproduct$imagepr_idProduct_id_4de16385_fk_cellphone");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Laptop", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithOne("Laptop")
                        .HasForeignKey("SellPhones.Domain.Entity.Laptop", "Id")
                        .IsRequired()
                        .HasConstraintName("laptop$laptop_product_ptr_id_137bfb4d_fk_cellphone");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Order", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("order$order_idUser_id_bb73099a_fk_user_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.OrderDetail", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.BranchProductColor", "BrandProductColor")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BrandProductColorId")
                        .IsRequired()
                        .HasConstraintName("orderdetail$orderde_idBrandProductColor__980f79ef_fk_cellphone");

                    b.HasOne("SellPhones.Domain.Entity.Order", "Oder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OderId")
                        .IsRequired()
                        .HasConstraintName("orderdetail$orderde_idOder_id_6730d0c3_fk_cellphone");

                    b.Navigation("BrandProductColor");

                    b.Navigation("Oder");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Product", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Manufacture", "NameManufacture")
                        .WithMany("Products")
                        .HasForeignKey("NameManufactureId")
                        .IsRequired()
                        .HasConstraintName("product$product_nameManufacture_id_473540a7_fk_cellphone");

                    b.Navigation("NameManufacture");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.ProductColor", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Color", "NameColor")
                        .WithMany("ProductColors")
                        .HasForeignKey("NameColorId")
                        .IsRequired()
                        .HasConstraintName("product_color$product_nameColor_id_0ea8764a_fk_cellphone");

                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("product_color$product_idProduct_id_057d2aaf_fk_cellphone");

                    b.Navigation("NameColor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Review", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("review$review_idProduct_id_4ede3625_fk_cellphone");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Smartphone", b =>
                {
                    b.HasOne("SellPhones.Domain.Entity.Product", "Product")
                        .WithOne("Smartphone")
                        .HasForeignKey("SellPhones.Domain.Entity.Smartphone", "Id")
                        .IsRequired()
                        .HasConstraintName("smartphone$smartph_product_ptr_id_a0e68210_fk_cellphone");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Branch", b =>
                {
                    b.Navigation("BranchProductColors");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.BranchProductColor", b =>
                {
                    b.Navigation("BranchPromotionProducts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Comment", b =>
                {
                    b.Navigation("InverseIdReplyNavigations");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.Group", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.Role", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Identity.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("UserGroups");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Manufacture", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Earphone");

                    b.Navigation("ImageProducts");

                    b.Navigation("Laptop");

                    b.Navigation("ProductColors");

                    b.Navigation("Reviews");

                    b.Navigation("Smartphone");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.ProductColor", b =>
                {
                    b.Navigation("BranchProductColors");
                });

            modelBuilder.Entity("SellPhones.Domain.Entity.Promotion", b =>
                {
                    b.Navigation("BranchPromotionProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
